{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Selection "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The objective of this notebook is to build a very first ent to end Machine Learning model to predict the probability of a patient being discharged on a particular day.\n",
    "\n",
    "We'll use the dataset generated by the `dataset` job of the ETL folder. \n",
    "\n",
    "At this instance, the focus won't be on model performance but rather on understanding the value potential of the available data and the speedness of the solution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/josefinadallavia/Documents/MIM/Tesis/AML-hospital\n"
     ]
    }
   ],
   "source": [
    "%cd /Users/josefinadallavia/Documents/MIM/Tesis/AML-hospital"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/josefinadallavia/opt/anaconda3/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject\n",
      "  return f(*args, **kwds)\n",
      "/Users/josefinadallavia/opt/anaconda3/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject\n",
      "  return f(*args, **kwds)\n",
      "/Users/josefinadallavia/opt/anaconda3/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject\n",
      "  return f(*args, **kwds)\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt   \n",
    "os.environ['KMP_DUPLICATE_LIB_OK']='True'\n",
    "from thesis_lib.utils import * \n",
    "from thesis_lib.modelling.data import *\n",
    "from thesis_lib.modelling.model import *\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset:  hospital_train_data.parquet\n",
      "Loading dataset:  hospital_val_data.parquet\n",
      "Loading dataset:  hospital_test_data.parquet\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>dataset_type</th>\n",
       "      <th>train</th>\n",
       "      <th>val</th>\n",
       "      <th>test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>n_observations</th>\n",
       "      <td>319150</td>\n",
       "      <td>33482</td>\n",
       "      <td>33309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>relative_size</th>\n",
       "      <td>0.82694</td>\n",
       "      <td>0.0867542</td>\n",
       "      <td>0.0863059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>n_cols</th>\n",
       "      <td>71</td>\n",
       "      <td>71</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>positives</th>\n",
       "      <td>42697</td>\n",
       "      <td>4555</td>\n",
       "      <td>4507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>negatives</th>\n",
       "      <td>276453</td>\n",
       "      <td>28927</td>\n",
       "      <td>28802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>positive_prop</th>\n",
       "      <td>0.133783</td>\n",
       "      <td>0.136043</td>\n",
       "      <td>0.135309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>negative_prop</th>\n",
       "      <td>0.866217</td>\n",
       "      <td>0.863957</td>\n",
       "      <td>0.864691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min_date</th>\n",
       "      <td>2017-01-01</td>\n",
       "      <td>2018-11-11</td>\n",
       "      <td>2018-11-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max_date</th>\n",
       "      <td>2018-11-10</td>\n",
       "      <td>2019-11-11</td>\n",
       "      <td>2019-11-11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "dataset_type         train         val        test\n",
       "n_observations      319150       33482       33309\n",
       "relative_size      0.82694   0.0867542   0.0863059\n",
       "n_cols                  71          71          71\n",
       "positives            42697        4555        4507\n",
       "negatives           276453       28927       28802\n",
       "positive_prop     0.133783    0.136043    0.135309\n",
       "negative_prop     0.866217    0.863957    0.864691\n",
       "min_date        2017-01-01  2018-11-11  2018-11-11\n",
       "max_date        2018-11-10  2019-11-11  2019-11-11"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = Data().load('data/hospital_dataset')\n",
    "variables = data.get_variables_dict()\n",
    "data.get_stats()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "variables['categorical_variables'].extend(['date_weekday','admission_weekday','date_month','admission_month'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['date',\n",
       " 'images_requester_roles',\n",
       " 'images_study_types',\n",
       " 'labos_requester_roles',\n",
       " 'sectors_last_sector',\n",
       " 'sectors_names',\n",
       " 'surgeries_actual',\n",
       " 'surgeries_anesthesia_types',\n",
       " 'surgeries_bact_positive',\n",
       " 'surgeries_injury_condition',\n",
       " 'surgeries_post_surgery_condition',\n",
       " 'surgeries_scheduled',\n",
       " 'surgeries_scheduled_done',\n",
       " 'surgeries_services',\n",
       " 'surgeries_types',\n",
       " 'gender',\n",
       " 'insurance_entity',\n",
       " 'entity_group',\n",
       " 'origin',\n",
       " 'admission_sector',\n",
       " 'isolation',\n",
       " 'presumptive_dianogsis',\n",
       " 'responsible_sector',\n",
       " 'ARM_TEP',\n",
       " 'CEC_TEP',\n",
       " 'request_origin',\n",
       " 'request',\n",
       " 'request_diagnosis',\n",
       " 'request_sector',\n",
       " 'admission_date',\n",
       " 'date_weekday',\n",
       " 'admission_weekday',\n",
       " 'date_month',\n",
       " 'admission_month']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "variables['categorical_variables']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hosp_day_number',\n",
       " 'images_count',\n",
       " 'images_cumulative',\n",
       " 'images_emergencies',\n",
       " 'images_requester_roles_count',\n",
       " 'images_requesters_count',\n",
       " 'images_study_types_count',\n",
       " 'labos_count',\n",
       " 'labos_cumulative',\n",
       " 'labos_emergencies',\n",
       " 'labos_requester_roles_count',\n",
       " 'labos_requesters_count',\n",
       " 'labos_set_count',\n",
       " 'labos_set_cumulative',\n",
       " 'sectors_count',\n",
       " 'sectors_last_stay',\n",
       " 'surgeries_count',\n",
       " 'surgeries_cumulative',\n",
       " 'surgeries_post_surgery_duration',\n",
       " 'surgeries_pre_surgery_duration',\n",
       " 'surgeries_prep_duration',\n",
       " 'surgeries_services_count',\n",
       " 'surgeries_surgery_delay',\n",
       " 'surgeries_surgery_duration',\n",
       " 'surgeries_types_count',\n",
       " 'emergency_service',\n",
       " 'new_born_weight',\n",
       " 'new_born_gestation_age',\n",
       " 'PIM2TEP',\n",
       " 'high_risk_TEP',\n",
       " 'low_risk_TEP',\n",
       " 'patient_age']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "variables['numerical_variables']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_params = {'classifier': 'lgbm',\n",
    "               'accepts_sparse': True,\n",
    "                'categorical_features' : ['date_weekday','admission_weekday','date_month','admission_month']\n",
    "                #'numerical_features' : variables['numerical_variables']\n",
    "               }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting pipeline...\n",
      "\t Preprocessing data\n",
      "\t Encoding Categorical Features with OneHotEncoding\n",
      "Transforming data...\n",
      "\t Transforming categorical features\n",
      "\t Preprocessing data\n",
      "\t Transforming categorical features\n",
      "\t Preprocessing data\n"
     ]
    }
   ],
   "source": [
    "lgbm_dateonly_features = Model(**model_params)\n",
    "lgbm_dateonly_features.transform(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training classifier\n",
      "[10]\ttraining_set's auc: 0.618082\tvalidation_set's auc: 0.611594\n",
      "[20]\ttraining_set's auc: 0.620919\tvalidation_set's auc: 0.611646\n",
      "[30]\ttraining_set's auc: 0.623593\tvalidation_set's auc: 0.612449\n",
      "[40]\ttraining_set's auc: 0.625018\tvalidation_set's auc: 0.612795\n",
      "[50]\ttraining_set's auc: 0.626128\tvalidation_set's auc: 0.612841\n",
      "[60]\ttraining_set's auc: 0.626859\tvalidation_set's auc: 0.613099\n",
      "[70]\ttraining_set's auc: 0.62751\tvalidation_set's auc: 0.61338\n",
      "[80]\ttraining_set's auc: 0.628039\tvalidation_set's auc: 0.613451\n",
      "[90]\ttraining_set's auc: 0.628294\tvalidation_set's auc: 0.613268\n",
      "[100]\ttraining_set's auc: 0.628606\tvalidation_set's auc: 0.613113\n",
      "CPU times: user 7.01 s, sys: 312 ms, total: 7.32 s\n",
      "Wall time: 5.17 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "lgbm_dateonly_features.fit_classifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "33"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(lgbm_dateonly_features.model_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training AUC ROC score:  0.6286063439277708\n",
      "validation AUC ROC score:  0.6131131292795517\n",
      "relative over-fitting:  0.0246469269645158\n"
     ]
    }
   ],
   "source": [
    "lgbm_dateonly_features.get_performance_metrics()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Date + Extrafeatures"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_params = {'classifier': 'lgbm',\n",
    "               'accepts_sparse': True,\n",
    "                'categorical_features' : variables['categorical_variables'],\n",
    "                'numerical_features' : variables['numerical_variables']\n",
    "               }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting pipeline...\n",
      "\t Preprocessing data\n",
      "\t Preprocessing data\n",
      "\t Encoding Categorical Features with OneHotEncoding\n",
      "Transforming data...\n",
      "\t Transforming numerical features\n",
      "\t Preprocessing data\n",
      "\t Transforming categorical features\n",
      "\t Preprocessing data\n",
      "\t Transforming numerical features\n",
      "\t Preprocessing data\n",
      "\t Transforming categorical features\n",
      "\t Preprocessing data\n"
     ]
    }
   ],
   "source": [
    "lgbm_date_features = Model(**model_params)\n",
    "lgbm_date_features.transform(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training classifier\n",
      "[10]\ttraining_set's auc: 0.860514\tvalidation_set's auc: 0.854732\n",
      "[20]\ttraining_set's auc: 0.868238\tvalidation_set's auc: 0.860738\n",
      "[30]\ttraining_set's auc: 0.872352\tvalidation_set's auc: 0.863696\n",
      "[40]\ttraining_set's auc: 0.875371\tvalidation_set's auc: 0.86593\n",
      "[50]\ttraining_set's auc: 0.877492\tvalidation_set's auc: 0.867026\n",
      "[60]\ttraining_set's auc: 0.8791\tvalidation_set's auc: 0.867855\n",
      "[70]\ttraining_set's auc: 0.880724\tvalidation_set's auc: 0.868828\n",
      "[80]\ttraining_set's auc: 0.881994\tvalidation_set's auc: 0.869261\n",
      "[90]\ttraining_set's auc: 0.882993\tvalidation_set's auc: 0.869738\n",
      "[100]\ttraining_set's auc: 0.883953\tvalidation_set's auc: 0.870056\n",
      "CPU times: user 46 s, sys: 1.41 s, total: 47.4 s\n",
      "Wall time: 16.9 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "lgbm_date_features.fit_classifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28114"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(lgbm_date_features.model_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training AUC ROC score:  0.8839530276609409\n",
      "validation AUC ROC score:  0.8700563935174721\n",
      "relative over-fitting:  0.01572100972405867\n"
     ]
    }
   ],
   "source": [
    "lgbm_date_features.get_performance_metrics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lgbm_date_features.plot_feature_importance()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgbm_param_grid = {'max_depth': [3,7,10],\n",
    "                  'learning_rate': [0.1,0.01,0.001,0.0001],\n",
    "                  'num_iterations': [50,100,150,200,250]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 60 candidates, totalling 180 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   5 tasks      | elapsed:    4.3s\n",
      "[Parallel(n_jobs=-1)]: Done  10 tasks      | elapsed:    4.8s\n",
      "[Parallel(n_jobs=-1)]: Done  17 tasks      | elapsed:    5.5s\n",
      "[Parallel(n_jobs=-1)]: Done  24 tasks      | elapsed:    6.2s\n",
      "[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:    6.9s\n",
      "[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:    7.7s\n",
      "[Parallel(n_jobs=-1)]: Done  53 tasks      | elapsed:    9.3s\n",
      "[Parallel(n_jobs=-1)]: Done  64 tasks      | elapsed:   10.3s\n",
      "[Parallel(n_jobs=-1)]: Done  77 tasks      | elapsed:   11.5s\n",
      "[Parallel(n_jobs=-1)]: Done  90 tasks      | elapsed:   12.7s\n",
      "[Parallel(n_jobs=-1)]: Done 105 tasks      | elapsed:   14.1s\n",
      "[Parallel(n_jobs=-1)]: Done 120 tasks      | elapsed:   15.4s\n",
      "[Parallel(n_jobs=-1)]: Done 137 tasks      | elapsed:   16.9s\n",
      "[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:   18.5s\n",
      "[Parallel(n_jobs=-1)]: Done 173 tasks      | elapsed:   20.3s\n",
      "[Parallel(n_jobs=-1)]: Done 180 out of 180 | elapsed:   21.0s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'mean_fit_time': array([1.2580448 , 0.60016537, 0.29424469, 0.27443258, 0.18583743,\n",
       "        0.24240406, 0.2255133 , 0.22574941, 0.24572396, 0.23204764,\n",
       "        0.22521782, 0.24223399, 0.26435526, 0.25514698, 0.33993125,\n",
       "        0.56015245, 0.43569279, 0.24545368, 0.28505015, 0.2685833 ,\n",
       "        0.25265344, 0.30612397, 0.23082376, 0.25199389, 0.25856757,\n",
       "        0.26304166, 0.30713487, 0.25804925, 0.21287044, 0.23083321,\n",
       "        0.26789864, 0.25688831, 0.29191128, 0.25986973, 0.23366268,\n",
       "        0.22994375, 0.23471196, 0.21968953, 0.22942241, 0.21228107,\n",
       "        0.22520359, 0.22084761, 0.22829111, 0.24002528, 0.24013702,\n",
       "        0.23859413, 0.22841001, 0.2361722 , 0.2205437 , 0.26957997,\n",
       "        0.3498168 , 0.25588226, 0.29727817, 0.30975699, 0.25784771,\n",
       "        0.24995716, 0.25337696, 0.2434539 , 0.27311023, 0.22468464]),\n",
       " 'std_fit_time': array([0.1010461 , 0.51189238, 0.004585  , 0.01916742, 0.0146934 ,\n",
       "        0.00418058, 0.03609736, 0.00852796, 0.03104814, 0.00653695,\n",
       "        0.01793434, 0.01868821, 0.03198513, 0.02002831, 0.06501237,\n",
       "        0.06301179, 0.11229242, 0.01565164, 0.02121518, 0.02172334,\n",
       "        0.03699929, 0.01278467, 0.00620763, 0.01020987, 0.02479285,\n",
       "        0.03662453, 0.04276889, 0.0215783 , 0.0106553 , 0.01468621,\n",
       "        0.00859295, 0.03506946, 0.03629062, 0.003723  , 0.0056299 ,\n",
       "        0.00979291, 0.01096638, 0.00522624, 0.01966225, 0.00784159,\n",
       "        0.01327907, 0.01133382, 0.01532945, 0.00879573, 0.00286649,\n",
       "        0.01886118, 0.02395586, 0.0174557 , 0.01250832, 0.04827533,\n",
       "        0.03074592, 0.01099676, 0.05112388, 0.05199915, 0.00387333,\n",
       "        0.01193612, 0.01737223, 0.02049802, 0.00792238, 0.03175432]),\n",
       " 'mean_score_time': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0.]),\n",
       " 'std_score_time': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0.]),\n",
       " 'param_learning_rate': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,\n",
       "                    0.1, 0.1, 0.1, 0.1, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,\n",
       "                    0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,\n",
       "                    0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,\n",
       "                    0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,\n",
       "                    0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,\n",
       "                    0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,\n",
       "                    0.0001],\n",
       "              mask=[False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False],\n",
       "        fill_value='?',\n",
       "             dtype=object),\n",
       " 'param_max_depth': masked_array(data=[3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 3, 3,\n",
       "                    3, 3, 3, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 3, 3, 3, 3,\n",
       "                    3, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3, 7,\n",
       "                    7, 7, 7, 7, 10, 10, 10, 10, 10],\n",
       "              mask=[False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False],\n",
       "        fill_value='?',\n",
       "             dtype=object),\n",
       " 'param_num_iterations': masked_array(data=[50, 100, 150, 200, 250, 50, 100, 150, 200, 250, 50,\n",
       "                    100, 150, 200, 250, 50, 100, 150, 200, 250, 50, 100,\n",
       "                    150, 200, 250, 50, 100, 150, 200, 250, 50, 100, 150,\n",
       "                    200, 250, 50, 100, 150, 200, 250, 50, 100, 150, 200,\n",
       "                    250, 50, 100, 150, 200, 250, 50, 100, 150, 200, 250,\n",
       "                    50, 100, 150, 200, 250],\n",
       "              mask=[False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False, False, False, False, False,\n",
       "                    False, False, False, False],\n",
       "        fill_value='?',\n",
       "             dtype=object),\n",
       " 'params': [{'learning_rate': 0.1, 'max_depth': 3, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.1, 'max_depth': 3, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.1, 'max_depth': 3, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.1, 'max_depth': 3, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.1, 'max_depth': 3, 'num_iterations': 250},\n",
       "  {'learning_rate': 0.1, 'max_depth': 7, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.1, 'max_depth': 7, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.1, 'max_depth': 7, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.1, 'max_depth': 7, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.1, 'max_depth': 7, 'num_iterations': 250},\n",
       "  {'learning_rate': 0.1, 'max_depth': 10, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.1, 'max_depth': 10, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.1, 'max_depth': 10, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.1, 'max_depth': 10, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.1, 'max_depth': 10, 'num_iterations': 250},\n",
       "  {'learning_rate': 0.01, 'max_depth': 3, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.01, 'max_depth': 3, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.01, 'max_depth': 3, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.01, 'max_depth': 3, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.01, 'max_depth': 3, 'num_iterations': 250},\n",
       "  {'learning_rate': 0.01, 'max_depth': 7, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.01, 'max_depth': 7, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.01, 'max_depth': 7, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.01, 'max_depth': 7, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.01, 'max_depth': 7, 'num_iterations': 250},\n",
       "  {'learning_rate': 0.01, 'max_depth': 10, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.01, 'max_depth': 10, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.01, 'max_depth': 10, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.01, 'max_depth': 10, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.01, 'max_depth': 10, 'num_iterations': 250},\n",
       "  {'learning_rate': 0.001, 'max_depth': 3, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.001, 'max_depth': 3, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.001, 'max_depth': 3, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.001, 'max_depth': 3, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.001, 'max_depth': 3, 'num_iterations': 250},\n",
       "  {'learning_rate': 0.001, 'max_depth': 7, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.001, 'max_depth': 7, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.001, 'max_depth': 7, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.001, 'max_depth': 7, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.001, 'max_depth': 7, 'num_iterations': 250},\n",
       "  {'learning_rate': 0.001, 'max_depth': 10, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.001, 'max_depth': 10, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.001, 'max_depth': 10, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.001, 'max_depth': 10, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.001, 'max_depth': 10, 'num_iterations': 250},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 3, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 3, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 3, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 3, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 3, 'num_iterations': 250},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 7, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 7, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 7, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 7, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 7, 'num_iterations': 250},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 10, 'num_iterations': 50},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 10, 'num_iterations': 100},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 10, 'num_iterations': 150},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 10, 'num_iterations': 200},\n",
       "  {'learning_rate': 0.0001, 'max_depth': 10, 'num_iterations': 250}],\n",
       " 'split0_test_score': array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan]),\n",
       " 'split1_test_score': array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan]),\n",
       " 'split2_test_score': array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan]),\n",
       " 'mean_test_score': array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan]),\n",
       " 'std_test_score': array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n",
       "        nan, nan, nan, nan, nan, nan, nan, nan]),\n",
       " 'rank_test_score': array([ 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n",
       "        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 31, 30, 29, 14,  2,  3,\n",
       "         4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 15, 28, 16, 17, 18, 19, 20,\n",
       "        21, 22, 23, 24, 25, 26, 27, 59, 60], dtype=int32)}"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lgbm_date_features.optimize_hyperparams(params_dict=lgbm_param_grid,\n",
    "                                         n_folds=3,n_iter=5,\n",
    "                                         search_type='grid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "exp_results = lgbm_date_features.get_model_selection_results()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "exp_results.to_csv('experiments/lgb_date_features_grid_search_results.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'learning_rate': 0.1, 'max_depth': 7, 'num_iterations': 200}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_params = lgbm_date_features.model_selection.best_params_\n",
    "best_params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training classifier\n",
      "[10]\ttraining_set's auc: 0.860514\tvalidation_set's auc: 0.854732\n",
      "[20]\ttraining_set's auc: 0.868238\tvalidation_set's auc: 0.860738\n",
      "[30]\ttraining_set's auc: 0.872352\tvalidation_set's auc: 0.863696\n",
      "[40]\ttraining_set's auc: 0.875371\tvalidation_set's auc: 0.86593\n",
      "[50]\ttraining_set's auc: 0.877492\tvalidation_set's auc: 0.867026\n",
      "[60]\ttraining_set's auc: 0.8791\tvalidation_set's auc: 0.867855\n",
      "[70]\ttraining_set's auc: 0.880724\tvalidation_set's auc: 0.868828\n",
      "[80]\ttraining_set's auc: 0.881994\tvalidation_set's auc: 0.869261\n",
      "[90]\ttraining_set's auc: 0.882993\tvalidation_set's auc: 0.869738\n",
      "[100]\ttraining_set's auc: 0.883953\tvalidation_set's auc: 0.870056\n",
      "[110]\ttraining_set's auc: 0.884854\tvalidation_set's auc: 0.870311\n",
      "[120]\ttraining_set's auc: 0.885829\tvalidation_set's auc: 0.87058\n",
      "[130]\ttraining_set's auc: 0.886482\tvalidation_set's auc: 0.870731\n",
      "[140]\ttraining_set's auc: 0.887401\tvalidation_set's auc: 0.870941\n",
      "[150]\ttraining_set's auc: 0.888265\tvalidation_set's auc: 0.871243\n",
      "[160]\ttraining_set's auc: 0.888835\tvalidation_set's auc: 0.871262\n",
      "[170]\ttraining_set's auc: 0.889468\tvalidation_set's auc: 0.871431\n",
      "[180]\ttraining_set's auc: 0.890182\tvalidation_set's auc: 0.871496\n",
      "[190]\ttraining_set's auc: 0.890719\tvalidation_set's auc: 0.871668\n",
      "[200]\ttraining_set's auc: 0.891228\tvalidation_set's auc: 0.871736\n",
      "CPU times: user 58.7 s, sys: 1.06 s, total: 59.8 s\n",
      "Wall time: 2min 42s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "lgbm_date_features.fit_classifier(**{'learning_rate': 0.1, 'max_depth': 7, 'num_iterations': 200})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training AUC ROC score:  0.8912276881944082\n",
      "validation AUC ROC score:  0.8717363899140184\n",
      "relative over-fitting:  0.02187016689290529\n"
     ]
    }
   ],
   "source": [
    "lgbm_date_features.get_performance_metrics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lgbm_date_features.plot_feature_importance(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
